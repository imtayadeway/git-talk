#+TITLE: What We Talk About When We Talk About Unit Testing
#+AUTHOR: Tim Wade
#+EMAIL: hello@timjwade.com
#+OPTIONS: title:nil, toc:nil, H:1
#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [bigger]
#+BEAMER_THEME: Singapore
#+startup: beamer

\centering

* Is this a Unit Test?
  #+BEGIN_SRC ruby
  it "quacks" do
    duck = Duck.new(:name => "Stewart")
    expect(duck.speak).to eq("Quack")
  end
  #+END_SRC

* Is this a Unit Test?
  #+BEGIN_SRC ruby
  it "quacks" do
    duck = Duck.new(:name => "Stewart")
    bread = Bread.new
    expect(duck.feed(bread)).to eq("Quack")
  end
  #+END_SRC

* Is this a Unit Test?
  #+BEGIN_SRC ruby
  it "quacks" do
    duck = FactoryGirl.create(:duck)
    expect(duck.speak).to eq("Quack")
  end
  #+END_SRC

* It depends
* Why?
* Testing is new(ish)
* We couldn't decide what the terms meant
* So we made more terms
* All the Terms
- Unit Tests
- Integration Tests
- Full Stack Tests
- System Tests
- Acceptance Tests
- Smoke Tests
- Functional Tests
- Contract Tests
- Collaboration Tests

* Two (or three) terms
- Unit Tests
- Integration Tests
- (Test isolation)

* Features and Attitudes
* Features
- Programming Paradigm (OO, Procedural, Functional, etc.)
- Scope
- Visibility
* Attitudes
- What you think a unit is
- What you think isolation is
* Type A: Units are Classes
- Isolated from other classes
- Stub/Mock collaborators
- Favors Outside-in development
- Integration tests combine different classes working together
* Type A: Units are Classes
- Better test feedback
- Leads to small, clean and well designed interfaces
- Leads to tight coupling between the test and the implementation
- Harder to refactor

* Quote
"But the main lesson I took was that tests should be able to ignore
one another completely. If I had one test broken, I wanted one
problem. If I had two tests broken, I wanted two problems." - Kent Beck

* Type B: Units can be Collections of Related Classes/Methods
- Isolated from changing 'the world' (network, filesystem, etc.)
- Avoids the use of Mocks/Stubs
- Favors Middle-out development
- Integration tests cross the boundaries
* Type B: Units can be Collections of Related Classes/Methods
- Leads to loosely coupled tests
- Easier to refactor
- Less feedback on design of the smaller parts and their interactions
- Prone to cascading failures

* Quote
"One convenient implication of isolated tests is that the tests are
order independent. If I want to grab a subset of tests and run them,
then I can do so without worrying that a test will break now because
of a prerequisite test is gone." - Kent Beck

* Mockist vs. Classicist
* X on Rails
* Omakase
- Usually departing from the framework is a bad idea
- But I disagree when it comes to testing
* The Test Frameworks
:PROPERTIES:
:BEAMER_ENV: fullframe
:END:

  #+BEGIN_SRC
  test
  ├── controllers
  ├── fixtures
  │   └── files
  ├── helpers
  ├── integration
  ├── mailers
  ├── models
  └── test_helper.rb
  #+END_SRC
* They are all integration tests
- Controller tests are integration tests in another folder
- Model tests (the 'unit' tests) all interact with the database
- Interaction with the database is permitted/encouraged in all the test frameworks?
- Isolation unimportant/irrelevant
* The Test Pyramid
[[./img/test-pyramid.png]]
* Alternatives
- Hexagonal Rails
- Uncle Bob: Architecture: The Lost Years
- Trailblazer
- Service Objects
* TDD is Dead

* Conclusion
- Always define your terms when you're talking about Unit/Integration Testing
- If you're a classicist/mockist or don't know, try another approach
* About
- imtayadeway
- github.com/imtayadeway/talks
* References: Test-Driven Development- Kent Beck
[[./img/tddbe.jpg]]
* References: Working Effectively with Unit Tests - Jay Fields
[[./img/wewut.jpeg]]
* References: xUnit Test Patterns: Refactoring Test Code - Gerard Meszaros
[[./img/xutp.jpg]]

* References
- http://martinfowler.com/bliki/UnitTest.html
- http://martinfowler.com/articles/mocksArentStubs.html
- http://blog.cleancoder.com/uncle-bob/2017/03/03/TDD-Harms-Architecture.html
- Ian Cooper - TDD: Where did it all go wrong? - https://vimeo.com/68375232
- J.B. Rainsberger - Integration Tests are a Scam - https://vimeo.com/80533536
